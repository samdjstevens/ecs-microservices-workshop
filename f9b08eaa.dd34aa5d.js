(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{80:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return o})),n.d(t,"default",(function(){return u}));var r=n(3),a=n(7),c=(n(0),n(85)),i={id:"cluster",title:"Creating the Cluster",sidebar_label:"Creating the Cluster",slug:"/cluster"},s={unversionedId:"cluster",id:"cluster",isDocsHomePage:!1,title:"Creating the Cluster",description:'Now we have the VPC created in which our application is going to live, we will create the "cluster" in which we deploy our services into via containers.',source:"@site/docs/cluster.md",slug:"/cluster",permalink:"/cluster",editUrl:"https://github.com/samdjstevens/ecs-microservices-workshop/edit/master/docs/cluster.md",version:"current",sidebar_label:"Creating the Cluster",sidebar:"someSidebar",previous:{title:"Creating the VPC",permalink:"/creating-the-vpc"},next:{title:"Adding a Service",permalink:"/adding-a-service"}},o=[{value:"Using Elastic Container Service",id:"using-elastic-container-service",children:[]},{value:"Creating an ECS Cluster in CDK",id:"creating-an-ecs-cluster-in-cdk",children:[]}],l={toc:o};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,'Now we have the VPC created in which our application is going to live, we will create the "cluster" in which we deploy our services into via containers.'),Object(c.b)("h2",{id:"using-elastic-container-service"},"Using Elastic Container Service"),Object(c.b)("p",null,"We are going to use ",Object(c.b)("strong",{parentName:"p"},"Elastic Container Service")," to run the docker containers of the application. With ECS, we will be using the ",Object(c.b)("strong",{parentName:"p"},"Fargate")," capacity provider, meaning we won't have to provision, manage, or even think about EC2 servers to run the containers on - this is all handled and asbtracted away by AWS."),Object(c.b)("p",null,"In ",Object(c.b)("strong",{parentName:"p"},"ECS"),", a cluster is ",Object(c.b)("em",{parentName:"p"},'"a logical grouping of tasks or services"'),". The services which run in a cluster are ran on underlying infrastructure by eithe EC2 or Fargate. TODO more on this."),Object(c.b)("h2",{id:"creating-an-ecs-cluster-in-cdk"},"Creating an ECS Cluster in CDK"),Object(c.b)("p",null,"We must add another CDK dependency to our stack first before we can tell CDK to create the cluster. This time it's the ",Object(c.b)("inlineCode",{parentName:"p"},"@aws-cdk/aws-ecs")," package. Stop the ",Object(c.b)("inlineCode",{parentName:"p"},"npm run watch")," command and run the following commands: "),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"npm install @aws-cdk/aws-ecs --save\nnpm run watch\n")),Object(c.b)("p",null,"Next, add the highlighted lines below into the stack."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-javascript",metastring:'title="lib/ecs-microservices-stack.ts" {3,14-18}',title:'"lib/ecs-microservices-stack.ts"',"{3,14-18}":!0},"import * as cdk from '@aws-cdk/core';\nimport * as ec2 from \"@aws-cdk/aws-ec2\";\nimport * as ecs from \"@aws-cdk/aws-ecs\";\n\nexport class EcsMicroservicesStack extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    const vpc = new ec2.Vpc(this, 'ClusterVpc', {\n        cidr: '10.0.0.0/16',\n        maxAzs: 2\n    })\n\n    // Create a new ECS cluster in the VPC\n    const cluster = new ecs.Cluster(this, 'EcsCluster', {\n        vpc,\n        clusterName: 'translattr',\n    })\n\n  }\n}\n")),Object(c.b)("p",null,"Run ",Object(c.b)("inlineCode",{parentName:"p"},"cdk deploy")," again to deploy the changes to the stack and create the cluster."),Object(c.b)("p",null,"Next, we will look at deploying the first service our app uses into the cluster."))}u.isMDXComponent=!0},85:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),u=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,i=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),p=u(n),b=r,m=p["".concat(i,".").concat(b)]||p[b]||d[b]||c;return n?a.a.createElement(m,s(s({ref:t},l),{},{components:n})):a.a.createElement(m,s({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,i=new Array(c);i[0]=b;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<c;l++)i[l]=n[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);